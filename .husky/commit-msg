# Get the commit message from the file
commit_msg=$(cat "$1")

# Conventional commit pattern
# Format: type(scope): description
# Examples: feat(auth): add login functionality, fix(ui): resolve button alignment
conventional_pattern="^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)(\([a-z-]+\))?: .{1,72}$"

# Check if commit message matches conventional format
if ! echo "$commit_msg" | grep -qE "$conventional_pattern"; then
  echo "Invalid commit message format!"
  echo ""
  echo "Please use conventional commit format:"
  echo "  type(scope): description"
  echo ""
  echo "Examples:"
  echo "  feat(auth): add login functionality"
  echo "  fix(ui): resolve button alignment issue"
  echo "  docs(readme): update installation instructions"
  echo "  style: format code with prettier"
  echo "  refactor(components): simplify button logic"
  echo "  perf: optimize image loading"
  echo "  test: add unit tests for auth module"
  echo "  chore: update dependencies"
  echo "  ci: add GitHub Actions workflow"
  echo "  build: configure webpack optimization"
  echo "  revert: revert previous commit"
  echo ""
  echo "Types: feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert"
  echo "Scope: optional, lowercase, hyphenated (e.g., auth, ui, components)"
  echo "Description: imperative mood, max 72 characters"
  echo ""
  exit 1
fi

# Check if commit message is too long
if [ ${#commit_msg} -gt 72 ]; then
  echo "Commit message is too long!"
  echo "Current length: ${#commit_msg} characters"
  echo "Maximum allowed: 72 characters"
  echo ""
  echo "Please shorten your commit message."
  exit 1
fi

echo "Commit message format is valid!"
